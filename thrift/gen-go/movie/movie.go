// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package movie

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Adult
//  - BackdropPath
//  - Budget
//  - Genres
//  - Homepage
//  - ID
//  - ImdbID
//  - OriginalLanguage
//  - OriginalTitle
//  - Overview
//  - Popularity
//  - PosterPath
//  - ProductionCompanies
//  - ProductionCountries
//  - ReleaseDate
//  - Revenue
//  - Runtime
//  - SpokenLanguages
//  - Status
//  - Tagline
//  - Title
//  - Video
//  - VoteAverage
//  - VoteCount
type TMDBMovie struct {
  Adult bool `thrift:"adult,1" db:"adult" json:"adult"`
  BackdropPath string `thrift:"backdropPath,2" db:"backdropPath" json:"backdropPath"`
  Budget int32 `thrift:"budget,3" db:"budget" json:"budget"`
  Genres []*TMDBMovieGenre `thrift:"genres,4" db:"genres" json:"genres"`
  Homepage string `thrift:"homepage,5" db:"homepage" json:"homepage"`
  ID int32 `thrift:"id,6" db:"id" json:"id"`
  ImdbID string `thrift:"imdbID,7" db:"imdbID" json:"imdbID"`
  OriginalLanguage string `thrift:"originalLanguage,8" db:"originalLanguage" json:"originalLanguage"`
  OriginalTitle string `thrift:"originalTitle,9" db:"originalTitle" json:"originalTitle"`
  Overview string `thrift:"overview,10" db:"overview" json:"overview"`
  Popularity float64 `thrift:"popularity,11" db:"popularity" json:"popularity"`
  PosterPath *string `thrift:"posterPath,12" db:"posterPath" json:"posterPath,omitempty"`
  ProductionCompanies []*TMDBMovieProductionCompany `thrift:"productionCompanies,13" db:"productionCompanies" json:"productionCompanies"`
  ProductionCountries []*TMDBMovieProductionCountry `thrift:"productionCountries,14" db:"productionCountries" json:"productionCountries"`
  ReleaseDate string `thrift:"releaseDate,15" db:"releaseDate" json:"releaseDate"`
  Revenue int32 `thrift:"revenue,16" db:"revenue" json:"revenue"`
  Runtime int32 `thrift:"runtime,17" db:"runtime" json:"runtime"`
  SpokenLanguages []*TMDBMovieSpokenLanguage `thrift:"spokenLanguages,18" db:"spokenLanguages" json:"spokenLanguages"`
  Status string `thrift:"status,19" db:"status" json:"status"`
  Tagline string `thrift:"tagline,20" db:"tagline" json:"tagline"`
  Title string `thrift:"title,21" db:"title" json:"title"`
  Video bool `thrift:"video,22" db:"video" json:"video"`
  VoteAverage float64 `thrift:"voteAverage,23" db:"voteAverage" json:"voteAverage"`
  VoteCount int32 `thrift:"voteCount,24" db:"voteCount" json:"voteCount"`
}

func NewTMDBMovie() *TMDBMovie {
  return &TMDBMovie{}
}


func (p *TMDBMovie) GetAdult() bool {
  return p.Adult
}

func (p *TMDBMovie) GetBackdropPath() string {
  return p.BackdropPath
}

func (p *TMDBMovie) GetBudget() int32 {
  return p.Budget
}

func (p *TMDBMovie) GetGenres() []*TMDBMovieGenre {
  return p.Genres
}

func (p *TMDBMovie) GetHomepage() string {
  return p.Homepage
}

func (p *TMDBMovie) GetID() int32 {
  return p.ID
}

func (p *TMDBMovie) GetImdbID() string {
  return p.ImdbID
}

func (p *TMDBMovie) GetOriginalLanguage() string {
  return p.OriginalLanguage
}

func (p *TMDBMovie) GetOriginalTitle() string {
  return p.OriginalTitle
}

func (p *TMDBMovie) GetOverview() string {
  return p.Overview
}

func (p *TMDBMovie) GetPopularity() float64 {
  return p.Popularity
}
var TMDBMovie_PosterPath_DEFAULT string
func (p *TMDBMovie) GetPosterPath() string {
  if !p.IsSetPosterPath() {
    return TMDBMovie_PosterPath_DEFAULT
  }
return *p.PosterPath
}

func (p *TMDBMovie) GetProductionCompanies() []*TMDBMovieProductionCompany {
  return p.ProductionCompanies
}

func (p *TMDBMovie) GetProductionCountries() []*TMDBMovieProductionCountry {
  return p.ProductionCountries
}

func (p *TMDBMovie) GetReleaseDate() string {
  return p.ReleaseDate
}

func (p *TMDBMovie) GetRevenue() int32 {
  return p.Revenue
}

func (p *TMDBMovie) GetRuntime() int32 {
  return p.Runtime
}

func (p *TMDBMovie) GetSpokenLanguages() []*TMDBMovieSpokenLanguage {
  return p.SpokenLanguages
}

func (p *TMDBMovie) GetStatus() string {
  return p.Status
}

func (p *TMDBMovie) GetTagline() string {
  return p.Tagline
}

func (p *TMDBMovie) GetTitle() string {
  return p.Title
}

func (p *TMDBMovie) GetVideo() bool {
  return p.Video
}

func (p *TMDBMovie) GetVoteAverage() float64 {
  return p.VoteAverage
}

func (p *TMDBMovie) GetVoteCount() int32 {
  return p.VoteCount
}
func (p *TMDBMovie) IsSetPosterPath() bool {
  return p.PosterPath != nil
}

func (p *TMDBMovie) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField22(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField23(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField24(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMDBMovie)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Adult = v
}
  return nil
}

func (p *TMDBMovie)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BackdropPath = v
}
  return nil
}

func (p *TMDBMovie)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Budget = v
}
  return nil
}

func (p *TMDBMovie)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMDBMovieGenre, 0, size)
  p.Genres =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TMDBMovieGenre{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Genres = append(p.Genres, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMDBMovie)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Homepage = v
}
  return nil
}

func (p *TMDBMovie)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TMDBMovie)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ImdbID = v
}
  return nil
}

func (p *TMDBMovie)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.OriginalLanguage = v
}
  return nil
}

func (p *TMDBMovie)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.OriginalTitle = v
}
  return nil
}

func (p *TMDBMovie)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Overview = v
}
  return nil
}

func (p *TMDBMovie)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Popularity = v
}
  return nil
}

func (p *TMDBMovie)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.PosterPath = &v
}
  return nil
}

func (p *TMDBMovie)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMDBMovieProductionCompany, 0, size)
  p.ProductionCompanies =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TMDBMovieProductionCompany{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.ProductionCompanies = append(p.ProductionCompanies, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMDBMovie)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMDBMovieProductionCountry, 0, size)
  p.ProductionCountries =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &TMDBMovieProductionCountry{}
    if err := _elem2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.ProductionCountries = append(p.ProductionCountries, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMDBMovie)  ReadField15(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ReleaseDate = v
}
  return nil
}

func (p *TMDBMovie)  ReadField16(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Revenue = v
}
  return nil
}

func (p *TMDBMovie)  ReadField17(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Runtime = v
}
  return nil
}

func (p *TMDBMovie)  ReadField18(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMDBMovieSpokenLanguage, 0, size)
  p.SpokenLanguages =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &TMDBMovieSpokenLanguage{}
    if err := _elem3.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.SpokenLanguages = append(p.SpokenLanguages, _elem3)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TMDBMovie)  ReadField19(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TMDBMovie)  ReadField20(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Tagline = v
}
  return nil
}

func (p *TMDBMovie)  ReadField21(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.Title = v
}
  return nil
}

func (p *TMDBMovie)  ReadField22(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.Video = v
}
  return nil
}

func (p *TMDBMovie)  ReadField23(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.VoteAverage = v
}
  return nil
}

func (p *TMDBMovie)  ReadField24(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.VoteCount = v
}
  return nil
}

func (p *TMDBMovie) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMDBMovie"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
    if err := p.writeField16(oprot); err != nil { return err }
    if err := p.writeField17(oprot); err != nil { return err }
    if err := p.writeField18(oprot); err != nil { return err }
    if err := p.writeField19(oprot); err != nil { return err }
    if err := p.writeField20(oprot); err != nil { return err }
    if err := p.writeField21(oprot); err != nil { return err }
    if err := p.writeField22(oprot); err != nil { return err }
    if err := p.writeField23(oprot); err != nil { return err }
    if err := p.writeField24(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMDBMovie) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("adult", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:adult: ", p), err) }
  if err := oprot.WriteBool(bool(p.Adult)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.adult (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:adult: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("backdropPath", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:backdropPath: ", p), err) }
  if err := oprot.WriteString(string(p.BackdropPath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.backdropPath (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:backdropPath: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("budget", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:budget: ", p), err) }
  if err := oprot.WriteI32(int32(p.Budget)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.budget (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:budget: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("genres", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:genres: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Genres)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Genres {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:genres: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("homepage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:homepage: ", p), err) }
  if err := oprot.WriteString(string(p.Homepage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.homepage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:homepage: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:id: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imdbID", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:imdbID: ", p), err) }
  if err := oprot.WriteString(string(p.ImdbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.imdbID (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:imdbID: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originalLanguage", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:originalLanguage: ", p), err) }
  if err := oprot.WriteString(string(p.OriginalLanguage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originalLanguage (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:originalLanguage: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originalTitle", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:originalTitle: ", p), err) }
  if err := oprot.WriteString(string(p.OriginalTitle)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originalTitle (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:originalTitle: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("overview", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:overview: ", p), err) }
  if err := oprot.WriteString(string(p.Overview)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.overview (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:overview: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("popularity", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:popularity: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Popularity)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.popularity (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:popularity: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetPosterPath() {
    if err := oprot.WriteFieldBegin("posterPath", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:posterPath: ", p), err) }
    if err := oprot.WriteString(string(*p.PosterPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.posterPath (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:posterPath: ", p), err) }
  }
  return err
}

func (p *TMDBMovie) writeField13(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productionCompanies", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:productionCompanies: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductionCompanies)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ProductionCompanies {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:productionCompanies: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField14(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("productionCountries", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:productionCountries: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ProductionCountries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ProductionCountries {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:productionCountries: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField15(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("releaseDate", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:releaseDate: ", p), err) }
  if err := oprot.WriteString(string(p.ReleaseDate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.releaseDate (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:releaseDate: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField16(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("revenue", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:revenue: ", p), err) }
  if err := oprot.WriteI32(int32(p.Revenue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.revenue (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:revenue: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField17(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("runtime", thrift.I32, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:runtime: ", p), err) }
  if err := oprot.WriteI32(int32(p.Runtime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runtime (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:runtime: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField18(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("spokenLanguages", thrift.LIST, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:spokenLanguages: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SpokenLanguages)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpokenLanguages {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:spokenLanguages: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField19(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:status: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField20(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tagline", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:tagline: ", p), err) }
  if err := oprot.WriteString(string(p.Tagline)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tagline (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:tagline: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField21(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("title", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:title: ", p), err) }
  if err := oprot.WriteString(string(p.Title)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.title (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:title: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField22(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("video", thrift.BOOL, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:video: ", p), err) }
  if err := oprot.WriteBool(bool(p.Video)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.video (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:video: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField23(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("voteAverage", thrift.DOUBLE, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:voteAverage: ", p), err) }
  if err := oprot.WriteDouble(float64(p.VoteAverage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voteAverage (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:voteAverage: ", p), err) }
  return err
}

func (p *TMDBMovie) writeField24(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("voteCount", thrift.I32, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:voteCount: ", p), err) }
  if err := oprot.WriteI32(int32(p.VoteCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.voteCount (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:voteCount: ", p), err) }
  return err
}

func (p *TMDBMovie) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMDBMovie(%+v)", *p)
}

// Attributes:
//  - ID
//  - Name
type TMDBMovieGenre struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewTMDBMovieGenre() *TMDBMovieGenre {
  return &TMDBMovieGenre{}
}


func (p *TMDBMovieGenre) GetID() int32 {
  return p.ID
}

func (p *TMDBMovieGenre) GetName() string {
  return p.Name
}
func (p *TMDBMovieGenre) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMDBMovieGenre)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TMDBMovieGenre)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TMDBMovieGenre) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMDBMovieGenre"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMDBMovieGenre) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TMDBMovieGenre) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TMDBMovieGenre) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMDBMovieGenre(%+v)", *p)
}

// Attributes:
//  - ID
//  - LogoPath
//  - Name
//  - OriginCountry
type TMDBMovieProductionCompany struct {
  ID int32 `thrift:"id,1" db:"id" json:"id"`
  LogoPath *string `thrift:"logoPath,2" db:"logoPath" json:"logoPath,omitempty"`
  Name string `thrift:"name,3" db:"name" json:"name"`
  OriginCountry string `thrift:"originCountry,4" db:"originCountry" json:"originCountry"`
}

func NewTMDBMovieProductionCompany() *TMDBMovieProductionCompany {
  return &TMDBMovieProductionCompany{}
}


func (p *TMDBMovieProductionCompany) GetID() int32 {
  return p.ID
}
var TMDBMovieProductionCompany_LogoPath_DEFAULT string
func (p *TMDBMovieProductionCompany) GetLogoPath() string {
  if !p.IsSetLogoPath() {
    return TMDBMovieProductionCompany_LogoPath_DEFAULT
  }
return *p.LogoPath
}

func (p *TMDBMovieProductionCompany) GetName() string {
  return p.Name
}

func (p *TMDBMovieProductionCompany) GetOriginCountry() string {
  return p.OriginCountry
}
func (p *TMDBMovieProductionCompany) IsSetLogoPath() bool {
  return p.LogoPath != nil
}

func (p *TMDBMovieProductionCompany) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMDBMovieProductionCompany)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TMDBMovieProductionCompany)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LogoPath = &v
}
  return nil
}

func (p *TMDBMovieProductionCompany)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TMDBMovieProductionCompany)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OriginCountry = v
}
  return nil
}

func (p *TMDBMovieProductionCompany) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMDBMovieProductionCompany"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMDBMovieProductionCompany) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *TMDBMovieProductionCompany) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLogoPath() {
    if err := oprot.WriteFieldBegin("logoPath", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:logoPath: ", p), err) }
    if err := oprot.WriteString(string(*p.LogoPath)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.logoPath (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:logoPath: ", p), err) }
  }
  return err
}

func (p *TMDBMovieProductionCompany) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:name: ", p), err) }
  return err
}

func (p *TMDBMovieProductionCompany) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("originCountry", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:originCountry: ", p), err) }
  if err := oprot.WriteString(string(p.OriginCountry)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.originCountry (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:originCountry: ", p), err) }
  return err
}

func (p *TMDBMovieProductionCompany) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMDBMovieProductionCompany(%+v)", *p)
}

// Attributes:
//  - Iso3166_1
//  - Name
type TMDBMovieProductionCountry struct {
  Iso3166_1 string `thrift:"iso3166_1,1" db:"iso3166_1" json:"iso3166_1"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewTMDBMovieProductionCountry() *TMDBMovieProductionCountry {
  return &TMDBMovieProductionCountry{}
}


func (p *TMDBMovieProductionCountry) GetIso3166_1() string {
  return p.Iso3166_1
}

func (p *TMDBMovieProductionCountry) GetName() string {
  return p.Name
}
func (p *TMDBMovieProductionCountry) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMDBMovieProductionCountry)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Iso3166_1 = v
}
  return nil
}

func (p *TMDBMovieProductionCountry)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TMDBMovieProductionCountry) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMDBMovieProductionCountry"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMDBMovieProductionCountry) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iso3166_1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iso3166_1: ", p), err) }
  if err := oprot.WriteString(string(p.Iso3166_1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iso3166_1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iso3166_1: ", p), err) }
  return err
}

func (p *TMDBMovieProductionCountry) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TMDBMovieProductionCountry) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMDBMovieProductionCountry(%+v)", *p)
}

// Attributes:
//  - Iso639_1
//  - Name
type TMDBMovieSpokenLanguage struct {
  Iso639_1 string `thrift:"iso639_1,1" db:"iso639_1" json:"iso639_1"`
  Name string `thrift:"name,2" db:"name" json:"name"`
}

func NewTMDBMovieSpokenLanguage() *TMDBMovieSpokenLanguage {
  return &TMDBMovieSpokenLanguage{}
}


func (p *TMDBMovieSpokenLanguage) GetIso639_1() string {
  return p.Iso639_1
}

func (p *TMDBMovieSpokenLanguage) GetName() string {
  return p.Name
}
func (p *TMDBMovieSpokenLanguage) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMDBMovieSpokenLanguage)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Iso639_1 = v
}
  return nil
}

func (p *TMDBMovieSpokenLanguage)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TMDBMovieSpokenLanguage) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMDBMovieSpokenLanguage"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMDBMovieSpokenLanguage) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("iso639_1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:iso639_1: ", p), err) }
  if err := oprot.WriteString(string(p.Iso639_1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iso639_1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:iso639_1: ", p), err) }
  return err
}

func (p *TMDBMovieSpokenLanguage) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TMDBMovieSpokenLanguage) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMDBMovieSpokenLanguage(%+v)", *p)
}

// Attributes:
//  - Code
//  - Message
type TMDBMovieError struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewTMDBMovieError() *TMDBMovieError {
  return &TMDBMovieError{}
}


func (p *TMDBMovieError) GetCode() int32 {
  return p.Code
}

func (p *TMDBMovieError) GetMessage() string {
  return p.Message
}
func (p *TMDBMovieError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMDBMovieError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TMDBMovieError)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TMDBMovieError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TMDBMovieError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMDBMovieError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TMDBMovieError) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *TMDBMovieError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMDBMovieError(%+v)", *p)
}

func (p *TMDBMovieError) Error() string {
  return p.String()
}

type MovieService interface {
  // Parameters:
  //  - ApiKey
  //  - Language
  Get(ctx context.Context, apiKey string, language string) (r *TMDBMovie, err error)
}

type MovieServiceClient struct {
  c thrift.TClient
}

func NewMovieServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MovieServiceClient {
  return &MovieServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMovieServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MovieServiceClient {
  return &MovieServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMovieServiceClient(c thrift.TClient) *MovieServiceClient {
  return &MovieServiceClient{
    c: c,
  }
}

func (p *MovieServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - ApiKey
//  - Language
func (p *MovieServiceClient) Get(ctx context.Context, apiKey string, language string) (r *TMDBMovie, err error) {
  var _args4 MovieServiceGetArgs
  _args4.ApiKey = apiKey
  _args4.Language = language
  var _result5 MovieServiceGetResult
  if err = p.Client_().Call(ctx, "get", &_args4, &_result5); err != nil {
    return
  }
  switch {
  case _result5.Error!= nil:
    return r, _result5.Error
  }

  return _result5.GetSuccess(), nil
}

type MovieServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MovieService
}

func (p *MovieServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MovieServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MovieServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMovieServiceProcessor(handler MovieService) *MovieServiceProcessor {

  self6 := &MovieServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self6.processorMap["get"] = &movieServiceProcessorGet{handler:handler}
return self6
}

func (p *MovieServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x7 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x7.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x7

}

type movieServiceProcessorGet struct {
  handler MovieService
}

func (p *movieServiceProcessorGet) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := MovieServiceGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := MovieServiceGetResult{}
var retval *TMDBMovie
  var err2 error
  if retval, err2 = p.handler.Get(ctx, args.ApiKey, args.Language); err2 != nil {
  switch v := err2.(type) {
    case *TMDBMovieError:
  result.Error = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - ApiKey
//  - Language
type MovieServiceGetArgs struct {
  ApiKey string `thrift:"apiKey,1" db:"apiKey" json:"apiKey"`
  Language string `thrift:"language,2" db:"language" json:"language"`
}

func NewMovieServiceGetArgs() *MovieServiceGetArgs {
  return &MovieServiceGetArgs{}
}


func (p *MovieServiceGetArgs) GetApiKey() string {
  return p.ApiKey
}

func (p *MovieServiceGetArgs) GetLanguage() string {
  return p.Language
}
func (p *MovieServiceGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieServiceGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ApiKey = v
}
  return nil
}

func (p *MovieServiceGetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Language = v
}
  return nil
}

func (p *MovieServiceGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieServiceGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("apiKey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:apiKey: ", p), err) }
  if err := oprot.WriteString(string(p.ApiKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiKey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:apiKey: ", p), err) }
  return err
}

func (p *MovieServiceGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("language", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:language: ", p), err) }
  if err := oprot.WriteString(string(p.Language)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.language (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:language: ", p), err) }
  return err
}

func (p *MovieServiceGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieServiceGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type MovieServiceGetResult struct {
  Success *TMDBMovie `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *TMDBMovieError `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewMovieServiceGetResult() *MovieServiceGetResult {
  return &MovieServiceGetResult{}
}

var MovieServiceGetResult_Success_DEFAULT *TMDBMovie
func (p *MovieServiceGetResult) GetSuccess() *TMDBMovie {
  if !p.IsSetSuccess() {
    return MovieServiceGetResult_Success_DEFAULT
  }
return p.Success
}
var MovieServiceGetResult_Error_DEFAULT *TMDBMovieError
func (p *MovieServiceGetResult) GetError() *TMDBMovieError {
  if !p.IsSetError() {
    return MovieServiceGetResult_Error_DEFAULT
  }
return p.Error
}
func (p *MovieServiceGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MovieServiceGetResult) IsSetError() bool {
  return p.Error != nil
}

func (p *MovieServiceGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MovieServiceGetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TMDBMovie{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MovieServiceGetResult)  ReadField1(iprot thrift.TProtocol) error {
  p.Error = &TMDBMovieError{}
  if err := p.Error.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *MovieServiceGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MovieServiceGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MovieServiceGetResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin("error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *MovieServiceGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MovieServiceGetResult(%+v)", *p)
}


